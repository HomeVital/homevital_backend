// <auto-generated />
using System;
using System.Collections.Generic;
using HomeVital.Repositories.dbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HomeVital.Repositories.Migrations
{
    [DbContext(typeof(HomeVitalDbContext))]
    [Migration("20250420202725_init_setup_patientPlan")]
    partial class init_setup_patientPlan
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HomeVital.Models.Entities.BloodPressure", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("BodyPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Diastolic")
                        .HasColumnType("integer");

                    b.Property<string>("MeasureHand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MeasurementID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<int>("Pulse")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Systolic")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("MeasurementID");

                    b.ToTable("BloodPressures");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.BloodPressureRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DiastolicCriticalMax")
                        .HasColumnType("integer");

                    b.Property<int>("DiastolicCriticalMin")
                        .HasColumnType("integer");

                    b.Property<int>("DiastolicCriticalStage3Max")
                        .HasColumnType("integer");

                    b.Property<int>("DiastolicCriticalStage3Min")
                        .HasColumnType("integer");

                    b.Property<int>("DiastolicGoodMax")
                        .HasColumnType("integer");

                    b.Property<int>("DiastolicNotOkMax")
                        .HasColumnType("integer");

                    b.Property<int>("DiastolicNotOkMin")
                        .HasColumnType("integer");

                    b.Property<int>("DiastolicOkMax")
                        .HasColumnType("integer");

                    b.Property<int>("DiastolicOkMin")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<int>("SystolicCriticalMax")
                        .HasColumnType("integer");

                    b.Property<int>("SystolicCriticalMin")
                        .HasColumnType("integer");

                    b.Property<int>("SystolicCriticalStage3Max")
                        .HasColumnType("integer");

                    b.Property<int>("SystolicCriticalStage3Min")
                        .HasColumnType("integer");

                    b.Property<int>("SystolicGoodMax")
                        .HasColumnType("integer");

                    b.Property<int>("SystolicNotOkMax")
                        .HasColumnType("integer");

                    b.Property<int>("SystolicNotOkMin")
                        .HasColumnType("integer");

                    b.Property<int>("SystolicOkMax")
                        .HasColumnType("integer");

                    b.Property<int>("SystolicOkMin")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodPressureRanges");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.BloodSugarRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("BloodSugarCriticalMax")
                        .HasColumnType("double precision");

                    b.Property<double>("BloodSugarCriticalMin")
                        .HasColumnType("double precision");

                    b.Property<double>("BloodSugarGoodMax")
                        .HasColumnType("double precision");

                    b.Property<double>("BloodSugarGoodMin")
                        .HasColumnType("double precision");

                    b.Property<double>("BloodSugarNotOkMax")
                        .HasColumnType("double precision");

                    b.Property<double>("BloodSugarNotOkMin")
                        .HasColumnType("double precision");

                    b.Property<double>("BloodSugarlowMax")
                        .HasColumnType("double precision");

                    b.Property<double>("BloodSugarlowMin")
                        .HasColumnType("double precision");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodSugarRanges");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.Bloodsugar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<float>("BloodsugarLevel")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MeasurementID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("MeasurementID");

                    b.ToTable("Bloodsugars");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.BodyTemperature", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MeasurementID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("MeasurementID");

                    b.ToTable("BodyTemperatures");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.BodyTemperatureRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<double>("TemperatureCriticalMax")
                        .HasColumnType("double precision");

                    b.Property<double>("TemperatureCriticalMin")
                        .HasColumnType("double precision");

                    b.Property<double>("TemperatureGoodMax")
                        .HasColumnType("double precision");

                    b.Property<double>("TemperatureGoodMin")
                        .HasColumnType("double precision");

                    b.Property<double>("TemperatureNotOkMax")
                        .HasColumnType("double precision");

                    b.Property<double>("TemperatureNotOkMin")
                        .HasColumnType("double precision");

                    b.Property<double>("TemperatureUnderAverage")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("BodyTemperatureRanges");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.BodyWeight", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MeasurementID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("MeasurementID");

                    b.ToTable("BodyWeights");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.BodyWeightRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<double>("WeightGainFluctuationPercentageGood")
                        .HasColumnType("double precision");

                    b.Property<double>("WeightGainPercentageGoodMax")
                        .HasColumnType("double precision");

                    b.Property<double>("WeightLossFluctuationPercentageGood")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("BodyWeightRanges");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.HealthcareWorker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<int>>("TeamIDs")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("ID");

                    b.ToTable("HealthcareWorkers");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.Measurement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.MeasurementPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("MeasurementFrequency")
                        .HasColumnType("integer");

                    b.Property<string>("MeasurementSchedule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MeasurementType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PatientPlanID")
                        .HasColumnType("integer");

                    b.Property<int>("TimesPerWeek")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("PatientPlanID");

                    b.ToTable("MeasurementPlan");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.OxygenSaturation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OxygenSaturationValue")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("OxygenSaturations");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.OxygenSaturationRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("OxygenSaturationCriticalMax")
                        .HasColumnType("double precision");

                    b.Property<double>("OxygenSaturationCriticalMin")
                        .HasColumnType("double precision");

                    b.Property<double>("OxygenSaturationGood")
                        .HasColumnType("double precision");

                    b.Property<double>("OxygenSaturationNotOkMax")
                        .HasColumnType("double precision");

                    b.Property<double>("OxygenSaturationNotOkMin")
                        .HasColumnType("double precision");

                    b.Property<double>("OxygenSaturationOkMax")
                        .HasColumnType("double precision");

                    b.Property<double>("OxygenSaturationOkMin")
                        .HasColumnType("double precision");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OxygenSaturationRanges");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeamID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.PatientPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientPlans");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.Team", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<int>>("PatientIDs")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<List<int>>("WorkerIDs")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("ID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("HealthcareWorkerID")
                        .HasColumnType("integer");

                    b.Property<string>("Kennitala")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PatientID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Kennitala")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.BloodPressure", b =>
                {
                    b.HasOne("HomeVital.Models.Entities.Measurement", null)
                        .WithMany("BloodPressure")
                        .HasForeignKey("MeasurementID");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.Bloodsugar", b =>
                {
                    b.HasOne("HomeVital.Models.Entities.Measurement", null)
                        .WithMany("BloodSugar")
                        .HasForeignKey("MeasurementID");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.BodyTemperature", b =>
                {
                    b.HasOne("HomeVital.Models.Entities.Measurement", null)
                        .WithMany("BodyTemperature")
                        .HasForeignKey("MeasurementID");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.BodyWeight", b =>
                {
                    b.HasOne("HomeVital.Models.Entities.Measurement", null)
                        .WithMany("BodyWeight")
                        .HasForeignKey("MeasurementID");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.MeasurementPlan", b =>
                {
                    b.HasOne("HomeVital.Models.Entities.PatientPlan", "PatientPlan")
                        .WithMany("MeasurementPlans")
                        .HasForeignKey("PatientPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientPlan");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.PatientPlan", b =>
                {
                    b.HasOne("HomeVital.Models.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.Measurement", b =>
                {
                    b.Navigation("BloodPressure");

                    b.Navigation("BloodSugar");

                    b.Navigation("BodyTemperature");

                    b.Navigation("BodyWeight");
                });

            modelBuilder.Entity("HomeVital.Models.Entities.PatientPlan", b =>
                {
                    b.Navigation("MeasurementPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
